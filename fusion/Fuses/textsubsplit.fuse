-- ============================================================================
-- modules
-- ============================================================================
local textutils = self and require("textutils") or nil
local json = self and require("dkjson") or nil

-- ============================================================================
-- constants
-- ============================================================================
FUSE_NAME = "TextSubSplit"
DATATYPE = "Text"

-- ============================================================================
-- fuse
-- ============================================================================
FuRegisterClass(FUSE_NAME, CT_Tool, {
    REGID_DataType = DATATYPE,
    REGID_InputDataType = DATATYPE,
    REG_NoCommonCtrls = true,
    REGS_Category = "Vonk\\Text\\Substring",
    REGS_Name = FUSE_NAME,
    REGS_OpDescription = "Returns a substring of a string.",
    REGS_OpIconString = FUSE_NAME
})

function Create()
    -- [[ Creates the user interface. ]]
    InText = self:AddInput("Text", "Text", {
        LINKID_DataType = "Text",
        LINK_Main = 1
    })

    InPattern = self:AddInput(
        "Pattern",
        "Pattern",
        {
            LINKID_DataType = "Text",
            INPID_InputControl = "TextEditControl",
            TEC_Lines = 1,
            --ICD_Width = 1 / 2,
            LINK_Main = 2
        }
    )

    InShowInput = self:AddInput("Show Input", "ShowInput", {
        LINKID_DataType = "Number",
        INPID_InputControl = "CheckboxControl",
        INP_Integer = true,
        INP_Default = 1.0,
        INP_External = false,
        INP_DoNotifyChanged = true
    })

    OutText = self:AddOutput("Output" , "Output" , {
        LINKID_DataType = "Text",
        LINK_Main = 1
    })
end

function NotifyChanged(inp, param, time)
    --[[
        Handles all input control events.

        :param inp: Input that triggered a signal.
        :type inp: Input

        :param param: Parameter object holding the (new) value.
        :type param: Parameter

        :param time: Current frame number.
        :type time: float
    ]]
    if inp == InShowInput then
        local visible
        if param.Value == 1.0 then visible = true else visible = false end
        InText:SetAttrs({LINK_Visible = visible})
        InPattern:SetAttrs({LINK_Visible = visible})
    end
end

function Process(req)
    -- [[ Creates the output. ]]
    local text = InText:GetValue(req).Value
    local pattern = InPattern:GetValue(req).Value
    local replaced = textutils.split(text, pattern)
    --local array = json.encode(replaced)
    local array = textutils.array_from_string(replaced)
    
    --dump(textutils.array_from_string(replaced))
    
    --dump(replaced)
    local out = Text(array)
    --local out = Text("Test")

    OutText:Set(req, out)
end
