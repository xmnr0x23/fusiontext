-- ============================================================================
-- constants
-- ============================================================================
FUSE_NAME = "TextOrderShuffle"
DATATYPE = "Text"

-- ============================================================================
-- fuse
-- ============================================================================
FuRegisterClass(FUSE_NAME, CT_Tool, {
    REGID_DataType = DATATYPE,
    REGID_InputDataType = DATATYPE,
    REG_NoCommonCtrls = true,
    REGS_Category = "Vonk\\Text",
    REGS_Name = FUSE_NAME,
    REGS_OpDescription = "Shuffles the order of a Fusion Text object.",
    REGS_OpIconString = FUSE_NAME
})

function Create()
    -- [[ Creates the user interface. ]]
    InText = self:AddInput("Text" , "Text" , {
        LINKID_DataType = "Text",
        INPID_InputControl = "TextEditControl",
        TEC_Lines = 1,
        LINK_Main = 1,
    })

    InShowInput = self:AddInput("Show Input", "ShowInput", {
        LINKID_DataType = "Number",
        INPID_InputControl = "CheckboxControl",
        INP_Integer = true,
        INP_Default = 0.0,
        INP_External = false,
        INP_DoNotifyChanged = true
    })
    
    OutText = self:AddOutput("Output" , "Output" , {
        LINKID_DataType = "Text",
        LINK_Main = 1
    })
end

--https://en.wikipedia.org/wiki/Fisherâ€“Yates_shuffle
--https://gist.github.com/Uradamus/10323382
--https://stackoverflow.com/questions/51752497/how-to-shuffle-the-letters-of-a-word-using-lua/51754124
function shuffle( s )

    t = {}
    n = 0

    s:gsub( "%a" , function ( c )
        if t[c] == nil then
            n = n + 1
            t[n] = c
            t[c] = n
        end
    end )

    --need to use Fu's time, will do for now
    math.randomseed( os.time() )
    for i = n , 2 , -1 do
        local j = math.random( i )
        t[i] , t[j] = t[j] , t[i]
    end

    return s:gsub( "%a" , function (c) return t[t[c]] end )

end

function NotifyChanged(inp, param, time)
    --[[
        Handles all input control events.

        :param inp: Input that triggered a signal.
        :type inp: Input

        :param param: Parameter object holding the (new) value.
        :type param: Parameter

        :param time: Current frame number.
        :type time: float
    ]]
    if inp == InShowInput then
        local visible
        if param.Value == 1.0 then visible = true else visible = false end
        InText:SetAttrs({LINK_Visible = visible})
    end
end

function Process(req)
    -- [[ Creates the output. ]]
    local str = InText:GetValue(req).Value

    local str_shuffle = shuffle( str )
    local out = Text( str_shuffle )

    OutText:Set( req , out )
end
