-- ============================================================================
-- constants
-- ============================================================================
FUSE_NAME = "TextCaseAlternate"
DATATYPE = "Text"

-- ============================================================================
-- fuse
-- ============================================================================
FuRegisterClass(FUSE_NAME, CT_Tool, {
    REGID_DataType = DATATYPE,
    REGID_InputDataType = DATATYPE,
    REG_NoCommonCtrls = true,
    REGS_Category = "Vonk\\Text",
    REGS_Name = FUSE_NAME,
    REGS_OpDescription = "Inverts the case of a Fusion Text object.",
    REGS_OpIconString = FUSE_NAME
})

function Create()
    -- [[ Creates the user interface. ]]
    InText = self:AddInput("Text" , "Text" , {
        LINKID_DataType = "Text",
        INPID_InputControl = "TextEditControl",
        TEC_Lines = 1,
        LINK_Main = 1,
    })

    InShowInput = self:AddInput("Show Input", "ShowInput", {
        LINKID_DataType = "Number",
        INPID_InputControl = "CheckboxControl",
        INP_Integer = true,
        INP_Default = 0.0,
        INP_External = false,
        INP_DoNotifyChanged = true
    })
    
    OutText = self:AddOutput("Output" , "Output" , {
        LINKID_DataType = "Text",
        LINK_Main = 1
    })
end

function case_alternate( word )
    local str_alternate = ""

    for i = 1, #word do
        local letter = word:sub( i , i )
        if ( i % 2 == 0) then
            -- even
            letter = letter:upper()
        else
            -- odd
            letter = letter:lower()
        end
        str_alternate = str_alternate .. letter
    end

    return str_alternate
end

function NotifyChanged(inp, param, time)
    --[[
        Handles all input control events.

        :param inp: Input that triggered a signal.
        :type inp: Input

        :param param: Parameter object holding the (new) value.
        :type param: Parameter

        :param time: Current frame number.
        :type time: float
    ]]
    if inp == InShowInput then
        local visible
        if param.Value == 1.0 then visible = true else visible = false end
        InText:SetAttrs({LINK_Visible = visible})
    end
end

function Process(req)
    -- [[ Creates the output. ]]
    local str = InText:GetValue(req).Value

    local str_alternate = str:gsub( "(%w+)" , case_alternate )
    local out = Text( str_alternate )

    OutText:Set( req , out )
end
